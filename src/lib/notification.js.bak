// @ts-nocheck

import Notifications from "resource:///com/github/Aylur/ags/service/notifications.js";
import Widget from "resource:///com/github/Aylur/ags/widget.js";
import { lookUpIcon, timeout } from "resource:///com/github/Aylur/ags/utils.js";
import { Box } from "./misc.js";

const NotificationIcon = ({ appEntry, appIcon, image }) => {
    if (image) {
        return Widget.Box({
            vpack: 'start',
            hexpand: false,
            class_name: 'icon img',
            css: `
                background-image: url("${image}");
                background-size: contain;
                background-repeat: no-repeat;
                background-position: center;
                min-width: 78px;
                min-height: 78px;
            `,
        });
    }

    let icon = 'dialog-information-symbolic';
    if (lookUpIcon(appIcon))
        icon = appIcon;

    if (lookUpIcon(appEntry))
        icon = appEntry;

    return Widget.Box({
        vpack: 'start',
        hexpand: false,
        class_name: 'icon',
        css: `
            min-width: 78px;
            min-height: 78px;
        `,
        children: [Widget.Icon({
            icon, size: 58,
            hpack: 'center', hexpand: true,
            vpack: 'center', vexpand: true,
        })],
    });
};

export const Notification = n => Widget.EventBox({
    class_name: `notification ${n.urgency}`,
    on_primary_click: () => n.dismiss(),
    properties: [['hovered', false]],
    on_hover: self => {
        if (self._hovered)
            return;

        // if there are action buttons and they are hovered
        // EventBox onHoverLost will fire off immediately,
        // so to prevent this we delay it
        timeout(300, () => self._hovered = true);
    },
    on_hover_lost: self => {
        if (!self._hovered)
            return;

        self._hovered = false;
        n.dismiss();
    },
    vexpand: false,
    visible: true,
    child: Widget.Box({
        vertical: true,
        children: [
            Widget.Box({
                children: [
                    NotificationIcon(n),
                    Widget.Box({
                        hexpand: true,
                        vertical: true,
                        children: [
                            Widget.Box({
                                children: [
                                    Widget.Label({
                                        class_name: 'title',
                                        xalign: 0,
                                        justification: 'left',
                                        hexpand: true,
                                        max_width_chars: 24,
                                        truncate: 'end',
                                        wrap: true,
                                        label: n.summary,
                                        use_markup: true,
                                    }),
                                    Widget.Button({
                                        class_name: 'close-button',
                                        vpack: 'start',
                                        child: Widget.Icon('window-close-symbolic'),
                                        on_clicked: n.close.bind(n),
                                    }),
                                ],
                            }),
                            Widget.Label({
                                class_name: 'description',
                                hexpand: true,
                                use_markup: true,
                                xalign: 0,
                                justification: 'left',
                                label: n.body,
                                wrap: true,
                            }),
                        ],
                    }),
                ],
            }),
            Widget.Box({
                class_name: 'actions',
                children: n.actions.map(({ id, label }) => Widget.Button({
                    class_name: 'action-button',
                    on_clicked: () => n.invoke(id),
                    hexpand: true,
                    child: Widget.Label(label),
                })),
            }),
        ],
    }),
});

// export const PopupList = () => {
//     let box_style = "min-height: 100px; min-width: 300px; padding: 10px; border-radius: 6px;background-color: #89E19C;"
//     let box = Widget.Box({
//         vertical: true,
//         binds: [['children', Notifications, 'popups',
//             popups => popups.map(Notification)]],
//         connections: [
//             [Notifications, self => {
//                 print("setting visible")
//                 self.css = self.children.length > 0 ? box_style : "padding: 1px;"
//                 print(self.css)
//             }]
//         ]
//     });
//     return box
// }

const PopupList = () => Widget.Box({
    className: 'notification-popup-box',
    vertical: true,
    visible: true,
    spacing: 20,
    binds: [
        ['children', Notifications, 'popups',popups => popups.map(Notification)],
    ],
    connections: [
        [Notifications, self => {
            self.css = self.children.length > 0 ? 'padding: 15px' : 'padding: 1px'
            print(self.css)
        }],
    ]
});

export const NotificationsPopupWindow = () => Widget.Window({
    name: 'notifications-popup-window',
    anchor: ['top'],
    child: PopupList(),
});